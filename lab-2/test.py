import functools

def long_time_decrypt(c, phi_n, t, z, n1):
    l = pow(2, pow(2, t, phi_n), n1)
    return l

def phi_f(n):
    phi_n = 1
    for i in n:
        phi_n = phi_n * (i - 1)
    return phi_n

# Заданные значения для расшифровки
c = 3026395149200343041894403584472397684376151532048068899448884643163678236048888818806765584172011019394208155454727217629079121396251370188483785682320943220936795167330162253594039529582605339659588694299025867843077733363645004218158583739567184287831040408048711582777310002887677523012150957022730337467252406316571450995785096618974330575681203478424253933098953980924148479929008945820053985288008158811698858888559579688183308387916670631310815198678999765087638560387886543155921940612944413440313691253793172643073873967783355782877141990734273830423134503534887350701449257306275708745376718426608910352496
n = [15013, 583343756982313, 585503197547927, 609245815680559, 612567235432583, 634947980859229, 635224892351513, 639438000563939, 654170414254271, 654269804672441, 667954470985657, 706144068530309, 721443717105973, 737993471695639, 744872496387077, 746232585529679, 795581973851653, 815694637597057, 817224718609627, 841183196554507, 864339847436159, 873021823131881, 884236929660113, 899583643974479, 922745965897867, 942872831732189, 951697329369323, 971274523714349, 1017566110290559, 1018452110902339, 1025985735184171, 1027313536626551, 1059774237802229, 1067609726096989, 1070689247726159, 1079289330417443, 1098516592571807, 1107673252158281, 1108654254305327, 1110918654474373, 1111516996694389, 1112193819715441]

n1 = 16801166465109052984956796702219479136700692152603640001472470493600002617002298302681832215942994746974878002533318970006820414971818787350153626339308150944829424332670924459749331062287393811934457789103209090873472485865328414154574392274611574654819495894137917800304580119452390318440601827273834522783696472257727329819952363099498446006266115011271978143149347765073211516486037823196033938908784720042927986421555211961923200006343296692217770693318701970436618066568854673260978968978974409802211538011638213976732286150311971354861300195440286582255769421094876667270445809991401456443444265323573485901383
t = 6039738711082505929
z = 139917575971321565740405932420625457310036271079338003886784324182514741777453941675283255245525928750141739676901664278764300872951801524855991519478564718024144720832999047687684340744465658807730292150571319084956271231037799321288077869164409662146821626628200600678966223382354752280901657213357146668056525234446747959642220954294300180946124697380519420264637671726255888651253934000027831917763819584423585903587577154729283694206436985549513217882666427997109549686825235958909428605247221998366006018410026392446064720747424287400728961283471932279824049509228058334419865822774654587977497006575152095818

# Получение расшифрованного сообщения
decrypted_message = long_time_decrypt(c, phi_f(n), t, z, n1)

# Преобразование расшифрованного сообщения в строку
decrypted_message_str = str(decrypted_message)

# Разбиение строки на символы и преобразование их в числа
numbers = [int(char) for char in decrypted_message_str if char.isdigit()]

# Печать чисел в последовательности
print("Исходное секретное сообщение:", " ".join(map(str, numbers[:10])))  # Вывод первых 10 чисел для примера
