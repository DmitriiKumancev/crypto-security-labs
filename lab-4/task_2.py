"""
реализация двух алгоритмоа: метод Полларда Rho для нахождения нетривиальных делителей числа и алгоритм дискретного логарифмирования для решения задачи нахождения логарифма числа по заданному основанию в конечном поле.

Функции:
---------
1. pollards_rho(n, a=2):
    реализует метод Полларда Rho для нахождения нетривиальных делителей числа n.
    - Параметры:
        - `n`: Целое число для факторизации.
        - `a`: Начальное значение параметра алгоритма (по умолчанию равно 2).
    - Возвращает:
        - Нетривиальный делитель числа n, если найден. В противном случае возвращает None.

2. discrete_logarithm(p, g, h):
    реализует алгоритм дискретного логарифмирования для поиска логарифма числа h по заданному основанию g в конечном поле с модулем p.
    - Параметры:
        - `p`: Модуль конечного поля.
        - `g`: Основание логарифма.
        - `h`: Число, логарифм которого нужно найти по основанию g.
    - Возвращает:
        - Логарифм числа h по основанию g в конечном поле с модулем p.
"""


def pollards_rho(n, a=2):
    def f(x):
        return (x ** 2 + a) % n
    
    x, y, d = 2, 2, 1
    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x - y), n)
    if d == n:
        return None
    else:
        return d
    
def discrete_logarithm(p, g, h):
    m = int(p ** 0.5) + 1
    table = {pow(g, j, p): j for j in range(m)}
    gm = pow(g, m * (p - 2), p)
    for i in range(m):
        y = (h * pow(gm, i, p)) % p
        if y in table:
            return i * m + table[y]

p = 17
g = 3
h1 = 6
h2 = 7
h3 = 10
log1 = discrete_logarithm(p, g, h1)
log2 = discrete_logarithm(p, g, h2)
log3 = discrete_logarithm(p, g, h3)
print("Логарифм числа 6 по основанию 3:", log1)
print("Логарифм числа 7 по основанию 3:", log2)
print("Логарифм числа 10 по основанию 3:", log3)